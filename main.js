/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LastModifiedTimestampInStatusBar
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  timestampFormat: "YYYY-MM-DD H:mm:ss",
  statusBarTitle: "Last Modified: ",
  refreshIntervalSeconds: 0.1
};
var LastModifiedTimestampInStatusBar = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItemEl = this.addStatusBarItem();
  }
  updateDisplay() {
    if (this.timestamp) {
      this.statusBarItemEl.setText(this.settings.statusBarTitle + this.timestamp);
    }
  }
  updateTimestamp(hook = null) {
    const file = this.app.workspace.getActiveFile();
    if (file) {
      const timestamp = (0, import_obsidian.moment)(file.stat.mtime).format(this.settings.timestampFormat);
      const isTimestampChanged = timestamp != this.timestamp;
      this.timestamp = timestamp;
      if (hook)
        hook(isTimestampChanged);
    }
  }
  setRefreshInterval() {
    if (this.refreshInterval !== null) {
      window.clearInterval(this.refreshInterval);
    }
    this.refreshInterval = window.setInterval(
      () => this.updateTimestamp((u) => {
        if (!u)
          return;
        this.updateDisplay();
      }),
      this.settings.refreshIntervalSeconds * 1e3
    );
    this.registerInterval(this.refreshInterval);
  }
  async onload() {
    await this.loadSettings();
    this.updateTimestamp();
    this.updateDisplay();
    this.setRefreshInterval();
    this.app.workspace.on("active-leaf-change", () => {
      this.updateTimestamp();
      this.updateDisplay();
    });
    this.addSettingTab(new LastModifiedTimestampInStatusBarSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LastModifiedTimestampInStatusBarSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings" });
    new import_obsidian.Setting(containerEl).setName("Timestamp Format").setDesc("Compatible with Moment.js formats, e.g. YYYY-MM-DD").addText(
      (text) => text.setPlaceholder("Enter format").setValue(this.plugin.settings.timestampFormat).onChange(async (value) => {
        this.plugin.settings.timestampFormat = value;
        await this.plugin.saveSettings();
        this.plugin.updateTimestamp();
        this.plugin.updateDisplay();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Title in Status Bar").addText(
      (text) => text.setPlaceholder("Last Modified:").setValue(this.plugin.settings.statusBarTitle).onChange(async (value) => {
        this.plugin.settings.statusBarTitle = value;
        await this.plugin.saveSettings();
        this.plugin.updateTimestamp();
        this.plugin.updateDisplay();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Timestamp Update Interval (in seconds)").setDesc("Note: Effectively, the minimum update interval seems to be 2s.").addText(
      (text) => text.setPlaceholder("2").setValue(this.plugin.settings.refreshIntervalSeconds.toString()).onChange(async (value) => {
        try {
          this.plugin.settings.refreshIntervalSeconds = +value;
          await this.plugin.saveSettings();
          this.plugin.setRefreshInterval();
        } finally {
        }
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
