/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LastModifiedTimestampInStatusBar
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  lastModifiedTimestampFormat: "YYYY-MM-DD H:mm:ss",
  createdTimestampFormat: "YYYY-MM-DD H:mm:ss",
  lastModifiedPrepend: "Last Modified: ",
  createdPrepend: "Created: ",
  refreshIntervalSeconds: 0.1
};
var LastModifiedTimestampInStatusBar = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.lastModifiedStatusBarItemEl = this.addStatusBarItem();
    this.createdStatusBarItemEl = this.addStatusBarItem();
  }
  updateLastModifiedDisplay() {
    if (this.lastModifiedTimestamp) {
      this.lastModifiedStatusBarItemEl.setText(this.settings.lastModifiedPrepend + this.lastModifiedTimestamp);
    }
  }
  updateCreatedDisplay() {
    if (this.createdTimestamp) {
      this.createdStatusBarItemEl.setText(this.settings.createdPrepend + this.createdTimestamp);
    }
  }
  updateCreatedTimestamp() {
    const file = this.app.workspace.getActiveFile();
    if (file) {
      const timestamp = (0, import_obsidian.moment)(file.stat.ctime).format(this.settings.createdTimestampFormat);
      this.createdTimestamp = timestamp;
    }
  }
  updateLastModifiedTimestamp(hook = null) {
    const file = this.app.workspace.getActiveFile();
    if (file) {
      const timestamp = (0, import_obsidian.moment)(file.stat.mtime).format(this.settings.lastModifiedTimestampFormat);
      const isTimestampChanged = timestamp != this.lastModifiedTimestamp;
      this.lastModifiedTimestamp = timestamp;
      if (hook)
        hook(isTimestampChanged);
    }
  }
  setLastModifiedRefreshInterval() {
    if (this.lastModifiedRefreshInterval !== null) {
      window.clearInterval(this.lastModifiedRefreshInterval);
    }
    this.lastModifiedRefreshInterval = window.setInterval(
      () => this.updateLastModifiedTimestamp((u) => {
        if (!u)
          return;
        this.updateLastModifiedDisplay();
      }),
      this.settings.refreshIntervalSeconds * 1e3
    );
    this.registerInterval(this.lastModifiedRefreshInterval);
  }
  async onload() {
    await this.loadSettings();
    this.setLastModifiedRefreshInterval();
    this.updateLastModifiedTimestamp();
    this.updateLastModifiedDisplay();
    this.updateCreatedTimestamp();
    this.updateCreatedDisplay();
    this.app.workspace.on("active-leaf-change", () => {
      this.updateLastModifiedTimestamp();
      this.updateLastModifiedDisplay();
      this.updateCreatedTimestamp();
      this.updateCreatedDisplay();
    });
    this.addSettingTab(new LastModifiedTimestampInStatusBarSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LastModifiedTimestampInStatusBarSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Last Modified Timestamp" });
    new import_obsidian.Setting(containerEl).setName("Timestamp Format").setDesc("Compatible with Moment.js formats, e.g. YYYY-MM-DD").addText(
      (text) => text.setPlaceholder("Enter format").setValue(this.plugin.settings.lastModifiedTimestampFormat).onChange(async (value) => {
        this.plugin.settings.lastModifiedTimestampFormat = value;
        await this.plugin.saveSettings();
        this.plugin.updateLastModifiedTimestamp();
        this.plugin.updateLastModifiedDisplay();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Title in Status Bar").addText(
      (text) => text.setPlaceholder("Last Modified:").setValue(this.plugin.settings.lastModifiedPrepend).onChange(async (value) => {
        this.plugin.settings.lastModifiedPrepend = value;
        await this.plugin.saveSettings();
        this.plugin.updateLastModifiedTimestamp();
        this.plugin.updateLastModifiedDisplay();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Timestamp Update Interval (in seconds)").setDesc("Note: Effectively, the minimum update interval seems to be 2s.").addText(
      (text) => text.setPlaceholder("2").setValue(this.plugin.settings.refreshIntervalSeconds.toString()).onChange(async (value) => {
        try {
          this.plugin.settings.refreshIntervalSeconds = +value;
          await this.plugin.saveSettings();
          this.plugin.setLastModifiedRefreshInterval();
        } finally {
        }
      })
    );
    containerEl.createEl("h3", { text: "Created Timestamp" });
    new import_obsidian.Setting(containerEl).setName("Timestamp Format").setDesc("Compatible with Moment.js formats, e.g. YYYY-MM-DD").addText(
      (text) => text.setPlaceholder("Enter format").setValue(this.plugin.settings.createdTimestampFormat).onChange(async (value) => {
        this.plugin.settings.createdTimestampFormat = value;
        await this.plugin.saveSettings();
        this.plugin.updateCreatedTimestamp();
        this.plugin.updateCreatedDisplay();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Title in Status Bar").addText(
      (text) => text.setPlaceholder("Created: ").setValue(this.plugin.settings.createdPrepend).onChange(async (value) => {
        this.plugin.settings.createdPrepend = value;
        await this.plugin.saveSettings();
        this.plugin.updateCreatedTimestamp();
        this.plugin.updateCreatedDisplay();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcblx0QXBwLFxuXHRQbHVnaW4sXG5cdFBsdWdpblNldHRpbmdUYWIsXG5cdFNldHRpbmcsXG5cdFRGaWxlLFxuXHRtb21lbnRcbn0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbnR5cGUgTGFzdE1vZGlmaWVkaW1lc3RhbXBDaGFuZ2VIb29rID0gKGlzVGltZXN0YW1wQ2hhbmdlZDogYm9vbGVhbikgPT4gdm9pZDtcbmludGVyZmFjZSBMYXN0TW9kaWZpZWRUaW1lc3RhbXBJblN0YXR1c0JhclNldHRpbmdzIHtcblx0Y3JlYXRlZFByZXBlbmQ6IHN0cmluZztcblx0Y3JlYXRlZFRpbWVzdGFtcEZvcm1hdDogc3RyaW5nO1xuXHRsYXN0TW9kaWZpZWRQcmVwZW5kOiBzdHJpbmc7XG5cdGxhc3RNb2RpZmllZFRpbWVzdGFtcEZvcm1hdDogc3RyaW5nO1xuXHRyZWZyZXNoSW50ZXJ2YWxTZWNvbmRzOiBudW1iZXI7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IExhc3RNb2RpZmllZFRpbWVzdGFtcEluU3RhdHVzQmFyU2V0dGluZ3MgPSB7XG5cdGxhc3RNb2RpZmllZFRpbWVzdGFtcEZvcm1hdDogJ1lZWVktTU0tREQgSDptbTpzcycsXG5cdGNyZWF0ZWRUaW1lc3RhbXBGb3JtYXQ6ICdZWVlZLU1NLUREIEg6bW06c3MnLFxuXHRsYXN0TW9kaWZpZWRQcmVwZW5kOiAnTGFzdCBNb2RpZmllZDogJyxcblx0Y3JlYXRlZFByZXBlbmQ6ICdDcmVhdGVkOiAnLFxuXHRyZWZyZXNoSW50ZXJ2YWxTZWNvbmRzOiAwLjEsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhc3RNb2RpZmllZFRpbWVzdGFtcEluU3RhdHVzQmFyIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IExhc3RNb2RpZmllZFRpbWVzdGFtcEluU3RhdHVzQmFyU2V0dGluZ3M7XG5cblx0Y3JlYXRlZFRpbWVzdGFtcDogc3RyaW5nIHwgbnVsbDtcblx0bGFzdE1vZGlmaWVkVGltZXN0YW1wOiBzdHJpbmcgfCBudWxsO1xuXHRsYXN0TW9kaWZpZWRSZWZyZXNoSW50ZXJ2YWw6IG51bWJlciB8IG51bGw7XG5cdFxuXHRsYXN0TW9kaWZpZWRTdGF0dXNCYXJJdGVtRWwgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcblx0Y3JlYXRlZFN0YXR1c0Jhckl0ZW1FbCA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xuXG5cdHVwZGF0ZUxhc3RNb2RpZmllZERpc3BsYXkoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMubGFzdE1vZGlmaWVkVGltZXN0YW1wKSB7XG5cdFx0XHR0aGlzLmxhc3RNb2RpZmllZFN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KHRoaXMuc2V0dGluZ3MubGFzdE1vZGlmaWVkUHJlcGVuZCArIHRoaXMubGFzdE1vZGlmaWVkVGltZXN0YW1wKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVDcmVhdGVkRGlzcGxheSgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5jcmVhdGVkVGltZXN0YW1wKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZWRTdGF0dXNCYXJJdGVtRWwuc2V0VGV4dCh0aGlzLnNldHRpbmdzLmNyZWF0ZWRQcmVwZW5kICsgdGhpcy5jcmVhdGVkVGltZXN0YW1wKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVDcmVhdGVkVGltZXN0YW1wKCk6IHZvaWQge1xuXHRcdGNvbnN0IGZpbGU6IFRGaWxlIHwgbnVsbCA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcblx0XHRpZiAoZmlsZSkge1xuXHRcdFx0Y29uc3QgdGltZXN0YW1wID0gbW9tZW50KGZpbGUuc3RhdC5jdGltZSlcblx0XHRcdFx0LmZvcm1hdCh0aGlzLnNldHRpbmdzLmNyZWF0ZWRUaW1lc3RhbXBGb3JtYXQpO1xuXG5cdFx0XHR0aGlzLmNyZWF0ZWRUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG5cdFx0fVxuXHR9XG5cblxuXHR1cGRhdGVMYXN0TW9kaWZpZWRUaW1lc3RhbXAoaG9vazogTGFzdE1vZGlmaWVkaW1lc3RhbXBDaGFuZ2VIb29rIHwgbnVsbCA9IG51bGwpOiB2b2lkIHtcblx0XHRjb25zdCBmaWxlOiBURmlsZSB8IG51bGwgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpXG5cdFx0aWYgKGZpbGUpIHtcblx0XHRcdGNvbnN0IHRpbWVzdGFtcCA9IG1vbWVudChmaWxlLnN0YXQubXRpbWUpXG5cdFx0XHRcdC5mb3JtYXQodGhpcy5zZXR0aW5ncy5sYXN0TW9kaWZpZWRUaW1lc3RhbXBGb3JtYXQpO1xuXG5cdFx0XHRjb25zdCBpc1RpbWVzdGFtcENoYW5nZWQgPSB0aW1lc3RhbXAgIT0gdGhpcy5sYXN0TW9kaWZpZWRUaW1lc3RhbXA7XG5cdFx0XHR0aGlzLmxhc3RNb2RpZmllZFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcblxuXHRcdFx0aWYgKGhvb2spIGhvb2soaXNUaW1lc3RhbXBDaGFuZ2VkKVxuXHRcdH1cblx0fVxuXG5cdHNldExhc3RNb2RpZmllZFJlZnJlc2hJbnRlcnZhbCgpIHtcblx0XHRpZiAodGhpcy5sYXN0TW9kaWZpZWRSZWZyZXNoSW50ZXJ2YWwgIT09IG51bGwpIHtcblx0XHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubGFzdE1vZGlmaWVkUmVmcmVzaEludGVydmFsKTtcblx0XHR9XG5cblx0XHR0aGlzLmxhc3RNb2RpZmllZFJlZnJlc2hJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChcblx0XHRcdCgpID0+IHRoaXMudXBkYXRlTGFzdE1vZGlmaWVkVGltZXN0YW1wKCh1KSA9PiB7XG5cdFx0XHRcdGlmICghdSkgcmV0dXJuO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUxhc3RNb2RpZmllZERpc3BsYXkoKTtcblx0XHRcdH0pLFxuXHRcdFx0dGhpcy5zZXR0aW5ncy5yZWZyZXNoSW50ZXJ2YWxTZWNvbmRzKjEwMDAsXG5cdFx0KTtcblxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh0aGlzLmxhc3RNb2RpZmllZFJlZnJlc2hJbnRlcnZhbCk7XG5cdH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIGxhc3QgbW9kaWZpZWQgdGltZXN0YW1wXG5cdFx0dGhpcy5zZXRMYXN0TW9kaWZpZWRSZWZyZXNoSW50ZXJ2YWwoKTtcblx0XHR0aGlzLnVwZGF0ZUxhc3RNb2RpZmllZFRpbWVzdGFtcCgpXG5cdFx0dGhpcy51cGRhdGVMYXN0TW9kaWZpZWREaXNwbGF5KClcblxuXHRcdC8vIGNyZWF0ZWQgdGltZXN0YW1wXG5cdFx0dGhpcy51cGRhdGVDcmVhdGVkVGltZXN0YW1wKCk7XG5cdFx0dGhpcy51cGRhdGVDcmVhdGVkRGlzcGxheSgpO1xuXG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHQvLyBsYXN0IG1vZGlmaWVkIHRpbWVzdGFtcFxuXHRcdFx0dGhpcy51cGRhdGVMYXN0TW9kaWZpZWRUaW1lc3RhbXAoKTtcblx0XHRcdHRoaXMudXBkYXRlTGFzdE1vZGlmaWVkRGlzcGxheSgpXG5cblx0XHRcdC8vIGNyZWF0ZWQgdGltZXN0YW1wXG5cdFx0XHR0aGlzLnVwZGF0ZUNyZWF0ZWRUaW1lc3RhbXAoKTtcblx0XHRcdHRoaXMudXBkYXRlQ3JlYXRlZERpc3BsYXkoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgTGFzdE1vZGlmaWVkVGltZXN0YW1wSW5TdGF0dXNCYXJTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBMYXN0TW9kaWZpZWRUaW1lc3RhbXBJblN0YXR1c0JhclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBMYXN0TW9kaWZpZWRUaW1lc3RhbXBJblN0YXR1c0JhcjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBMYXN0TW9kaWZpZWRUaW1lc3RhbXBJblN0YXR1c0Jhcikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdMYXN0IE1vZGlmaWVkIFRpbWVzdGFtcCd9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1RpbWVzdGFtcCBGb3JtYXQnKVxuXHRcdFx0LnNldERlc2MoJ0NvbXBhdGlibGUgd2l0aCBNb21lbnQuanMgZm9ybWF0cywgZS5nLiBZWVlZLU1NLUREJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIGZvcm1hdCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0TW9kaWZpZWRUaW1lc3RhbXBGb3JtYXQpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0TW9kaWZpZWRUaW1lc3RhbXBGb3JtYXQgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi51cGRhdGVMYXN0TW9kaWZpZWRUaW1lc3RhbXAoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi51cGRhdGVMYXN0TW9kaWZpZWREaXNwbGF5KCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpXG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdUaXRsZSBpbiBTdGF0dXMgQmFyJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0xhc3QgTW9kaWZpZWQ6Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxhc3RNb2RpZmllZFByZXBlbmQpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0TW9kaWZpZWRQcmVwZW5kID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4udXBkYXRlTGFzdE1vZGlmaWVkVGltZXN0YW1wKCk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4udXBkYXRlTGFzdE1vZGlmaWVkRGlzcGxheSgpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblxuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnVGltZXN0YW1wIFVwZGF0ZSBJbnRlcnZhbCAoaW4gc2Vjb25kcyknKVxuXHRcdFx0LnNldERlc2MoJ05vdGU6IEVmZmVjdGl2ZWx5LCB0aGUgbWluaW11bSB1cGRhdGUgaW50ZXJ2YWwgc2VlbXMgdG8gYmUgMnMuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJzInKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmcmVzaEludGVydmFsU2Vjb25kcy50b1N0cmluZygpKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZnJlc2hJbnRlcnZhbFNlY29uZHMgPSArdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldExhc3RNb2RpZmllZFJlZnJlc2hJbnRlcnZhbCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmaW5hbGx5IHt9XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdDcmVhdGVkIFRpbWVzdGFtcCd9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1RpbWVzdGFtcCBGb3JtYXQnKVxuXHRcdFx0LnNldERlc2MoJ0NvbXBhdGlibGUgd2l0aCBNb21lbnQuanMgZm9ybWF0cywgZS5nLiBZWVlZLU1NLUREJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIGZvcm1hdCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jcmVhdGVkVGltZXN0YW1wRm9ybWF0KVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY3JlYXRlZFRpbWVzdGFtcEZvcm1hdCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnVwZGF0ZUNyZWF0ZWRUaW1lc3RhbXAoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi51cGRhdGVDcmVhdGVkRGlzcGxheSgpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KVxuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnVGl0bGUgaW4gU3RhdHVzIEJhcicpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdDcmVhdGVkOiAnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY3JlYXRlZFByZXBlbmQpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jcmVhdGVkUHJlcGVuZCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnVwZGF0ZUNyZWF0ZWRUaW1lc3RhbXAoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi51cGRhdGVDcmVhdGVkRGlzcGxheSgpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblxuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBT087QUFZUCxJQUFNLG1CQUE2RDtBQUFBLEVBQ2xFLDZCQUE2QjtBQUFBLEVBQzdCLHdCQUF3QjtBQUFBLEVBQ3hCLHFCQUFxQjtBQUFBLEVBQ3JCLGdCQUFnQjtBQUFBLEVBQ2hCLHdCQUF3QjtBQUN6QjtBQUVBLElBQXFCLG1DQUFyQixjQUE4RCx1QkFBTztBQUFBLEVBQXJFO0FBQUE7QUFPQyx1Q0FBOEIsS0FBSyxpQkFBaUI7QUFDcEQsa0NBQXlCLEtBQUssaUJBQWlCO0FBQUE7QUFBQSxFQUUvQyw0QkFBa0M7QUFDakMsUUFBSSxLQUFLLHVCQUF1QjtBQUMvQixXQUFLLDRCQUE0QixRQUFRLEtBQUssU0FBUyxzQkFBc0IsS0FBSyxxQkFBcUI7QUFBQSxJQUN4RztBQUFBLEVBQ0Q7QUFBQSxFQUVBLHVCQUE2QjtBQUM1QixRQUFJLEtBQUssa0JBQWtCO0FBQzFCLFdBQUssdUJBQXVCLFFBQVEs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QUFtQixFQUNqRCxTQUFTLE9BQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyxzQkFBc0I7QUFDM0MsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixhQUFLLE9BQU8sNEJBQTRCO0FBQ3hDLGFBQUssT0FBTywwQkFBMEI7QUFBQSxNQUN2QyxDQUFDO0FBQUEsSUFDRjtBQUdELFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLHdDQUF3QyxFQUNoRCxRQUFRLGdFQUFnRSxFQUN4RTtBQUFBLE1BQVEsVUFBUSxLQUNmLGVBQWUsR0FBRyxFQUNsQixTQUFTLEtBQUssT0FBTyxTQUFTLHVCQUF1QixTQUFTLENBQUMsRUFDL0QsU0FBUyxPQUFPLFVBQVU7QUFDMUIsWUFBSTtBQUNILGVBQUssT0FBTyxTQUFTLHlCQUF5QixDQUFDO0FBQy9DLGdCQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLGVBQUssT0FBTywrQkFBK0I7QUFBQSxRQUM1QyxVQUNBO0FBQUEsUUFBUztBQUFBLE1BQ1YsQ0FBQztBQUFBLElBQ0Y7QUFFRCxnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLG9CQUFtQixDQUFDO0FBRXRELFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLGtCQUFrQixFQUMxQixRQUFRLG9EQUFvRCxFQUM1RDtBQUFBLE1BQVEsVUFBUSxLQUNmLGVBQWUsY0FBYyxFQUM3QixTQUFTLEtBQUssT0FBTyxTQUFTLHNCQUFzQixFQUNwRCxTQUFTLE9BQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyx5QkFBeUI7QUFDOUMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixhQUFLLE9BQU8sdUJBQXVCO0FBQ25DLGFBQUssT0FBTyxxQkFBcUI7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDRjtBQUVELFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLHFCQUFxQixFQUM3QjtBQUFBLE1BQVEsVUFBUSxLQUNmLGVBQWUsV0FBVyxFQUMxQixTQUFTLEtBQUssT0FBTyxTQUFTLGNBQWMsRUFDNUMsU0FBUyxPQUFPLFVBQVU7QUFDMUIsYUFBSyxPQUFPLFNBQVMsaUJBQWlCO0FBQ3RDLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsYUFBSyxPQUFPLHVCQUF1QjtBQUNuQyxhQUFLLE9BQU8scUJBQXFCO0FBQUEsTUFDbEMsQ0FBQztBQUFBLElBQ0Y7QUFBQSxFQUVGO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
